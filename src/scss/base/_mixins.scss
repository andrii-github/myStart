@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
    @return $shorthand;
  }
}


@function is-length($value) {
  @return type-of($value) != "null" and (str-slice($value + "", 1, 4) == "calc"
       or index(auto inherit initial 0, $value)
       or (type-of($value) == "number" and not(unitless($value))));
}

@function is-size($value) {
  @return is-length($value)
          or contains("fill" "fit-content" "min-content" "max-content", $value);
}
@mixin absolute($sides: null null null null) {
  position: absolute;
  $exact-size: (
          top: nth($sides, 1),
          right: nth($sides, 2),
          bottom: nth($sides, 3),
          left: nth($sides, 4)
  );
  @each $side, $value in $exact-size {
    @if is-length($value) {
      #{$side}: $value;
    }
  }
}


@mixin absolute-tl($top:0, $left:0) {
  position: absolute;
  top: $top;
  left: $left;
}

@mixin absolute-br($bottom:0, $right:0) {
  position: absolute;
  bottom: $bottom;
  right: $right;
}

@mixin m($margins: null null null null) {
  $exact-margin: (
          margin-top: nth($margins, 1),
          margin-right: nth($margins, 2),
          margin-bottom: nth($margins, 3),
          margin-left: nth($margins, 4)
  );
  @each $margin, $value in $exact-margin {
    @if is-length($value) {
      #{$margin}: $value;
    }
  }
}
@mixin p($paddings: null null null null) {
  $exact-padding: (
          padding-top: nth($paddings, 1),
          padding-right: nth($paddings, 2),
          padding-bottom: nth($paddings, 3),
          padding-left: nth($paddings, 4)
  );
  @each $padding, $value in $exact-padding {
    @if is-length($value) {
      #{$padding}: $value;
    }
  }
}

@mixin size-reset($margin: 0, $padding: 0) {
  margin: $margin;
  padding: $padding;
}

@mixin background-center($size: cover) {
  background: {
    position: 50% 50%;
    size: $size;
    repeat: no-repeat;
  }
}
@mixin has-color($bg-color,$color) {
  background-color: $bg-color;
  color: $color;
}

@mixin rounded($radius: 50%) {
  border-radius: $radius;
}
@mixin border($color, $width: 1px, $style: solid) {
  border: $width $style $color;
}

@mixin center {
  @include m(null auto);
}

@mixin absolute-center {
  @include absolute(0 0 0 0);
  @include m(auto);
}

@mixin middle-vertical {
  @include absolute(50% null null null);
  transform: translateY(-50%);
}

@mixin middle-horizontal {
  @include absolute(null null null 50%);
  transform: translateX(-50%);
}

@mixin middle-center {
  @include absolute(50% null null 50%);
  transform: translate(-50%, -50%);
}

@mixin cl {
  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

@mixin font-style($bold:normal, $style:normal) {
  font: {
    weight: $bold;
    style: $style;
  }
}

@mixin list-unstyled($display:block) {
  padding-left: 0;
  list-style: none;

  li {
    display: $display;
  }
}

@mixin size($value) {
  $width: nth($value, 1);
  $height: $width;

  @if length($value) > 1 {
    $height: nth($value, 2);
  }

  @if is-size($height) {
    height: $height;
  } @else {
    @warn "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.";
  }

  @if is-size($width) {
    width: $width;
  } @else {
    @warn "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.";
  }
}


@mixin square($size:100%) {
  width: $size;
  height: $size;
}

@mixin dark-overlay($opacity) {
  position: relative;
  z-index: 1;

  &:after {
    content: '';
    @include size(100%);
    @include absolute(0 0 0 0);
    background: rgba(0, 0, 0, $opacity);
    z-index: -1;
  }
}

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

@mixin inline($font-size) {
  list-style-type: none;
  font-size: 0;

  li {
    display: inline;
    font-size: $font-size;
  }
}

@mixin placeholder($color) {
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}


$a-transition-long: .5s;

@mixin placeholder-animation-opacity($class, $transition: $a-transition-long, $text-indent: 250px){
  .#{$class}::-webkit-input-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    opacity: 0;
  }

  .#{$class}::-moz-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
  .#{$class}:-moz-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
  .#{$class}:-ms-input-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
}


@mixin placeholder-animation-left($class, $transition: $a-transition-long, $text-indent: -200px){
  .#{$class}::-webkit-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}::-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus::-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-ms-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-ms-input-placeholder{
    text-indent: $text-indent;
  }
}

@mixin placeholder-animation-right($class, $transition: $a-transition-long, $text-indent: 250px){
  .#{$class}::-webkit-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}::-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus::-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-ms-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-ms-input-placeholder{
    text-indent: $text-indent;
  }
}

@mixin scrollbar-style($width, $height, $foreground-color, $border-radius, $background-color: mix($foreground-color, white,  30%)) {
  ::-webkit-scrollbar {
    width: $width;
    height: $height;
  }

  ::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  ::-webkit-scrollbar-track {
    border-radius: $border-radius;
    background: $background-color;
  }

  // ie
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

@mixin selection-style($bg-color, $color) {
  ::selection {
    background-color: $bg-color;
    color: $color;
  }
}

@mixin transition-transform($transition: .15s ease-in-out) {
 will-change: transform;
 transition: transform $transition;
}

@mixin transition-willChange($value, $transition: .15s ease-in-out) {
  will-change: $value;
  transition: $value $transition;
}

@mixin object-fit($fit: cover) {
  object-fit: $fit;
  object-position: center;
}

@mixin landscape {
  @media screen and (max-width: 766px) and (orientation: landscape) {
    @content
  }
}


// Media queries for iPhones
// iphone 3, 3gs, 4, 4s
@mixin iphone-xs{
  @media screen and (device-aspect-ratio: 2/3) {
    @content;
  }
}
// iPhone 5, 5s, SE
@mixin iphone-sm{
  @media screen and (device-aspect-ratio: 40/71) {
    @content;
  }
}

// iPhone 6, 6s, 7, 8
@mixin iphone-md{
  @media screen and (device-aspect-ratio: 375/667) {
    @content;
  }
}

// iPhone 6+, 7+, 8+
@mixin iphone-lg{
  @media only screen and (min-device-width : 414px) and (max-device-width : 736px) and (-webkit-min-device-pixel-ratio : 3) and (-webkit-device-pixel-ratio : 3) {
    @content;
  }
}

//iPhone X
@mixin iphone-x {
  @media only screen and (device-width : 375px) and (device-height : 812px) and (-webkit-device-pixel-ratio : 3) {
    @content;
  }
}

//IPad
@mixin ipad {
  @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {
    @content;
  }
}

//Retina display
@mixin retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
  }
}
